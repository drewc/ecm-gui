#+TITLE: Manage Users

This app needs users. This is how they are managed in the gui.

#+begin_src emacs-lisp
  (setq-local org-babel-noweb-wrap-start "code:<<")
  (add-hook 'org-babel-post-tangle-hook #'delete-trailing-whitespace)

  (add-hook 'org-babel-post-tangle-hook #'save-buffer :append)
  ;; # Local Variables:
  ;; # org-babel-noweb-wrap-start: "code:<<"
  ;; # End:
#+end_src

#+RESULTS:
| delete-trailing-whitespace | save-buffer |

#+begin_src emacs-lisp
  org-babel-noweb-wrap-start
#+end_src

#+RESULTS:
: code:<<

* ManageUsers.vue

We use a [[https://quasar.dev/vue-components/table#Server-side-pagination%252C-filter-and-sorting][Quasar Table]]. As of right now, the table is not that big, but we want
to load it from serverside as, like everything, this app has no way to otherwise
see it.


#+begin_src vue :tangle "../src/pages/ManageUsers.vue" :noweb yes
code:<<m-u-template>>
<script>
code:<<m-u-script>>
</script>
#+end_src


** Columns 

#+begin_src js :noweb-ref m-u-columns
  columns: [
    {
      name: 'name',
      required: true,
      label: 'Username',
      align: 'left',
      field: row => row.name,
      format: val => `${val}`,
      sortable: true
    },
    { name: 'login', align: 'center', label: 'Can Login?', field: 'login', sortable: true },
    { name: 'corpus', align: 'left', label: 'Person/Company', field: row => row.corpus !== null ? row.corpus.full_name : null, sortable: true },
    { name: 'person_id', label: 'person_id', field: 'person_id', sortable: true },
    { name: 'user_id', label: 'user_id', field: 'user_id', sortable: true },
    { name: 'group', label: 'group', field: 'group', sortable: true },
    { name: 'group_membership', label: 'Membership', field: 'group_membership', sortable: true },
    { name: 'sodium', label: 'Sodium (mg)', field: 'sodium', sortable: true },
    { name: 'calcium', label: 'Calcium (%)', field: 'calcium', sortable: true, sort: (a, b) => parseInt(a, 10) - parseInt(b, 10) },
    { name: 'iron', label: 'Iron (%)', field: 'iron', sortable: true, sort: (a, b) => parseInt(a, 10) - parseInt(b, 10) }
  ]
#+end_src

** Script

*** Custom Sort 

We want sorting to work for a lot. 

#+begin_src js :noweb-ref m-u-custom-sort
      customSort (rows, sortBy, descending) {
        const data = [...rows]
        function mk (o) {
          if (o === null) {
            return ''
          } else if (Array.isArray(o)) {
            return o.toString()
          } else {
            return o
          }
        }
 
        if (sortBy) {
          data.sort((a, b) => {
            const x = descending ? b : a
            const y = descending ? a : b
            var xsb = mk(x[sortBy])
            var ysb = mk(y[sortBy])

            if (typeof xsb === 'string') {
              // string sort
              return xsb > ysb ? 1 : xsb < ysb ? -1 : 0
            } else {
              // numeric sort
              return parseFloat(x[sortBy]) - parseFloat(y[sortBy])
            }
          })
        }

        return data
      }
#+end_src
*** Export Default 

 #+begin_src js :noweb-ref m-u-script :noweb yes
   // import UserView from 'components/UserView'
   export default {
     // components: {
     //   UserView
     // },
     data () {
       return {
         filter: '',
         loading: false,
         pagination: {
           sortBy: false,
           descending: false,
           page: 1,
           rowsPerPage: 3,
           rowsNumber: 10
         },
         user: false,
         code:<<m-u-columns>>,
         original: [],
         data: []
       }
     },
     mounted () {
       // get initial data from server
       this.loadData()
       this.user = { name: 'asd' }
     },
     methods: {
       onRequest (props) {
         const { page, rowsPerPage, sortBy, descending } = props.pagination
         const filter = props.filter
         console.log('OnRequest' + filter)
         console.log(this.original)
         function folter (filter, arr) {
           const sw = arr.filter(row => row.name.startsWith(filter))
           const i = arr.filter(row => row.name.includes(filter))
           return [...new Set(sw.concat(i))]
         }
         var fdata = filter ? folter(filter, this.original) : this.original.slice()

         if (sortBy) {
           console.log('sortby ' + sortBy)
           fdata = this.customSort(fdata, sortBy, descending)
         }

         this.pagination.rowsNumber = fdata.length
         this.loading = true
         // get all rows if "All" (0) is selected
         const fetchCount = rowsPerPage === 0 ? this.pagination.rowsNumber : rowsPerPage
         console.log(fetchCount)
         // calculate starting row of data
         const startRow = (page - 1) * rowsPerPage
         // const returnedData = this.fetchFromServer(startRow, fetchCount, filter, sortBy, descending)
         console.log(fdata.slice(startRow, 3))
         console.log(startRow)
         // // clear out existing data and add new
         this.data.splice(0, this.data.length, ...fdata.slice(startRow, startRow + fetchCount))
         // this.data = fdata.slice(startRow, 3)

         // don't forget to update local pagination object
         this.pagination.page = page
         this.pagination.rowsPerPage = rowsPerPage
         this.pagination.sortBy = sortBy
         this.pagination.descending = descending

         // ...and turn of loading indicator
         this.loading = false
       },

       // emulate ajax call
       // SELECT * FROM ... WHERE...LIMIT...
       fetchFromServer (startRow, count, filter, sortBy, descending) {
         this.loadData()
       },
       loadData () {
         this.$axios.get('/json/users')
           .then((response) => {
             console.log(response)
             this.original = response.data
             this.pagination.rowsNumber = this.original.length
             this.data = this.original.slice(0, this.pagination.rowsPerPage)
           })
           .catch(() => {
             this.$q.notify({
               color: 'negative',
               position: 'top',
               message: 'Loading failed',
               icon: 'report_problem'
             })
           })
       },
       code:<<m-u-custom-sort>>, 
       // emulate 'SELECT count(*) FROM ...WHERE...'
       getRowsNumberCount (filter) {
         if (!filter) {
           return this.original.length
         }
         let count = 0
         this.original.forEach((treat) => {
           if (treat.name.includes(filter)) {
             ++count
           }
         })
         return count
       }
     }
   }
 #+end_src
** Template 

   #+begin_src vue :noweb-ref m-u-template
     <template>
     <div class="q-pa-md">
       <router-view></router-view>
       <!-- <template v-if="user"> -->
       <!--   <user-view v-model="user" /> -->
       <!-- </template> -->
       <q-table
         title="Treats"
         :data="data"
         :columns="columns"
         row-key="user_id"
         @request="onRequest"
         :filter="filter"
         :pagination.sync="pagination"
         :sort-method="customSort"
         binary-state-sort
         >
         <!--  -->
         <!-- :loading="loading" -->
         <!--  -->
         <template v-slot:top-right>
           <q-input borderless dense debounce="300" v-model="filter" placeholder="Search">
             <template v-slot:append>
               <q-icon name="search" />
             </template>
           </q-input>
         </template>

         <template v-slot:body-cell-name="props">
           <q-td :props="props">
             <div>
               <q-badge color="purple" :label="props.value" />
             </div>
             <div class="my-table-details">
               {{ props.row.details }}
             </div>
           </q-td>
         </template>
       </q-table>
     </div>
     </template>
   #+end_src
* UserView.vue

#+begin_src vue :noweb yes :tangle "../src/components/UserView.vue"
  <template>
      <q-card>
      <q-btn round color="primary" icon="close" style="float:right"/>
        <q-card-section>
          <div class="text-h6">          {{ id }}</div>
          <div class="text-subtitle2">by John Doe</div>
        </q-card-section>

        <q-separator inset />

        <q-card-section>
          {{ user.name }}
        </q-card-section>
        {{ user.name }}
        This is e pluribis enumaasd
        <br>
        <hr>
      </q-card>
  </template>
  <script>
  export default {
    name: 'UserView',
    props: { value: Object, id: String },
    mounted () {
      this.user = (this.value !== undefined) ? this.value : { name: 'asdasd' }
      console.log(this.$parent)
    },
    data () {
      return {
        user: {}
      }
    }
  }
  </script>
#+end_src




* Local Variables 
# Local Variables:
# org-babel-noweb-wrap-start: "code:<<"
# End:
