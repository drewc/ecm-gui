* vue3-simple-typeahead
  :PROPERTIES:
  :CUSTOM_ID: vue3-simple-typeahead
  :END:
[[https://www.npmjs.com/package/vue3-simple-typeahead][[[https://img.shields.io/npm/v/vue3-simple-typeahead.svg]]]]
[[https://v3.vuejs.org/][[[https://img.shields.io/badge/vue-3.x-brightgreen.svg]]]]
[[https://en.wikipedia.org/wiki/MIT_License][[[https://img.shields.io/npm/l/vue3-simple-typeahead]]]]
[[https://www.npmjs.com/package/vue3-simple-typeahead][[[https://img.shields.io/npm/dt/vue3-simple-typeahead.svg]]]]
[[https://www.npmjs.com/package/vue3-simple-typeahead][[[https://img.shields.io/bundlephobia/min/vue3-simple-typeahead?color=brightgreen]]]]

A Vue3 component for a simple typeahead component. It will show a list
of suggested items based on the user input.

The component includes it's own input and when the user types on it the
suggested options appear.

#+caption: Demo
[[file:vue3-simple-typeahead.gif]]

** Demo
   :PROPERTIES:
   :CUSTOM_ID: demo
   :END:
[[https://vue3-simple-typeahead-demo.netlify.app/][Go to demo page]]

[[https://github.com/frikinside/vue3-simple-typeahead-demo][vue3-simple-typeahead-demo
source code]]

** Installation
   :PROPERTIES:
   :CUSTOM_ID: installation
   :END:
*** [[https://www.npmjs.com/package/vue3-simple-typeahead][NPM]]
    :PROPERTIES:
    :CUSTOM_ID: npm
    :END:
#+begin_src js
  npm install vue3-simple-typeahead
#+end_src

*** Browser
    :PROPERTIES:
    :CUSTOM_ID: browser
    :END:
You can also use the browser bundle in a script tag.

#+begin_example
  <script src="https://unpkg.com/vue3-simple-typeahead"></script>
#+end_example

** Add installed component to your app
   :PROPERTIES:
   :CUSTOM_ID: add-installed-component-to-your-app
   :END:
Import the vue3-simple-typeahead component and register it globally in
your Vue app. Import the CSS as well if you wish to use the default
styling.

#+begin_src js
  import { createApp } from 'vue';
  import App from './App.vue';
  import SimpleTypeahead from 'vue3-simple-typeahead';
  import 'vue3-simple-typeahead/dist/vue3-simple-typeahead.css'; //Optional default CSS

  let app = createApp(App);
  app.use(SimpleTypeahead);
  app.mount('#app');
#+end_src

You can also import vue3-simple-typeahead locally in your component if
you prefer.

#+begin_src js
  import SimpleTypeahead from 'vue3-simple-typeahead'
  import 'vue3-simple-typeahead/dist/vue3-simple-typeahead.css' //Optional default CSS

  export default {
    name: 'my-vue-component',
    ...
    components: {
      SimpleTypeahead
    }
    ...
  }
#+end_src

** Usage
   :PROPERTIES:
   :CUSTOM_ID: usage
   :END:
Use the component on your own app components

#+begin_example
  <vue3-simple-typeahead
      id="typeahead_id"
      placeholder="Start writing..."
      :items="['One','Two','Three',...]"
      :minInputLength="1"
      :itemProjection="itemProjectionFunction"
      @selectItem="selectItemEventHandler"
      @onInput="onInputEventHandler"
      @onFocus="onFocusEventHandler"
      @onBlur="onBlurEventHandler"
  >
  </vue3-simple-typeahead>
#+end_example

With custom slots template

#+begin_example
  <vue3-simple-typeahead
      id="typeahead_id"
      placeholder="Start writing..."
      :items="['One','Two','Three',...]"
      :minInputLength="1"
      :itemProjection="itemProjectionFunction"
      @selectItem="selectItemEventHandler"
      @onInput="onInputEventHandler"
      @onFocus="onFocusEventHandler"
      @onBlur="onBlurEventHandler"
  >
      <template #list-header>
          LIST HEADER
      </template>
      <template #list-item-text="slot"><span v-html="slot.boldMatchText(slot.itemProjection(slot.item))"></span></template>
      <template #list-footer>
          LIST FOOTER
      </template>
  </vue3-simple-typeahead>
#+end_example

*** User interaction
    :PROPERTIES:
    :CUSTOM_ID: user-interaction
    :END:
When the user types on the typeahead input and the minimum input length
is meeted a suggestion list appears below the input with the items that
match the user input. You can continue to type further to filter the
selection, but you could use keyboard or mouse input to make your
selection.abnf

When the suggestion list show up, you can continue to type to filter the
selection or you use the =Arrow Up=↑ or =Arrow Down=↓ keys to navigate
the list of suggestions. When you have selected the desired element
press Enter or TAB to select the current element.

| Control | Effect                                                             |
|---------+--------------------------------------------------------------------|
| ↑       | Navigate up on the suggestion list, selecting the previous element |
| ↓       | Navigate down on the suggestion list, selecting the next element   |
| Enter   | Choose the current element selection                               |
| TAB     | Choose the current element selection                               |

You can use the mouse instead, simply hover you cursor over the desire
element and click on it.

#+caption: User controls
[[file:vue3-simple-typeahead.gif]]

*** Props
    :PROPERTIES:
    :CUSTOM_ID: props
    :END:
| Prop                                  | Type             | Default                    | Description                                                                             |
|---------------------------------------+------------------+----------------------------+-----------------------------------------------------------------------------------------|
| [[#id][=id=]]                         | String           | Random id generation       | The id for the input control. Can be useful to link with a =label for=""=               |
| [[#placeholder][=placeholder=]]       | String           | =''=                       | Placeholder text for the input                                                          |
| [[#items][=items=]]                   | Array (Required) |                            | List of objects or strings with the elements for suggestions                            |
| [[#defaultItem][=defaultItem=]]       | Any              |                            | Default item to be selected                                                             |
| [[#minInputLength][=minInputLength=]] | Number           | 2                          | Minimum input length for the suggestion length to appear, the prop value has to be >= 0 |
| [[#itemProjection][=itemProjection=]] | Function: String | =(item) => {return item;}= | Projection function to map the items to a string value for search and display           |

/Remember you can always use lower-kebap-case for camelCase props like
=min-input-length=/

*** Events
    :PROPERTIES:
    :CUSTOM_ID: events
    :END:
| Event                         | Signature                                                        | Description                                                                                         |
|-------------------------------+------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------|
| [[#selectItem][=selectItem=]] | =function (item: String): void=                                  | Emitted when the user selects an item from the suggestion list                                      |
| [[#onInput][=onInput=]]       | =function (event: Object { input: String, items: Array }): void= | Emitted when the user types anything                                                                |
| [[#onFocus][=onFocus=]]       | =function (event: Object { input: String, items: Array }): void= | Emitted when the input control get the focus                                                        |
| [[#onBlur][=onBlur=]]         | =function (event: Object { input: String, items: Array }): void= | Emitted when the input control lost the focus [When the user select an item, the focus is lost too] |

*** Slots
    :PROPERTIES:
    :CUSTOM_ID: slots
    :END:
| Slot                                   | Parent                                  | Props                                     | Description                                                     |
|----------------------------------------+-----------------------------------------+-------------------------------------------+-----------------------------------------------------------------|
| [[#list-header][=#list-header=]]       | =div.simple-typeahead-list-header=      |                                           | Slot to be show at top of the suggestion list                   |
| [[#list-item-text][=#list-item-text=]] | =span.simple-typeahead-list-item-text'= | =item=, =itemProjection=, =boldMatchText= | Slot to customize the text of every item in the suggestion list |
| [[#list-footer][=#list-footer=]]       | =div.simple-typeahead-list-footer=      |                                           | Slot to be show at bottom of the suggestion list                |

**** Slot =#list-item-text= props
     :PROPERTIES:
     :CUSTOM_ID: slot-list-item-text-props
     :END:
| Prop                                  | Type             | Description                                                                                                   |
|---------------------------------------+------------------+---------------------------------------------------------------------------------------------------------------|
| [[#item][=item=]]                     | String or Object | The item of the items array                                                                                   |
| [[#itemProjection][=itemProjection=]] | function         | Use the item projection function provided as prop to the =vue3-simple-typeahead= element                      |
| [[#boldMatchText][=boldMatchText=]]   | function         | A function that receives a string and add strong tags to the parts of the text matched by the search criteria |

*** Styling
    :PROPERTIES:
    :CUSTOM_ID: styling
    :END:
Overwrite styles when using the default css included or add custom
styles basing your rules on this structure.

#+begin_example
  div#{:id}_wrapper.simple-typeahead
      input#{:id}.simple-typeahead-input
      div.simple-typeahead-list
          .simple-typeahead-list-header
          .simple-typeahead-list-item &.simple-typeahead-list-item-active
              .simple-typeahead-list-item-text
          .simple-typeahead-list-footer
#+end_example
