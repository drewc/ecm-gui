[[https://travis-ci.org/berniegp/vue-unique-id][[[https://travis-ci.org/berniegp/vue-unique-id.svg?branch=master]]]]

* vue-unique-id
  :PROPERTIES:
  :CUSTOM_ID: vue-unique-id
  :END:
Vue.js plugin that generates component-scoped HTML identifiers for use
in form inputs, labels, jQuery plugins, etc. This solves the problem of
generating unique HTML ids for DOM elements when creating reusable Vue
components that can be instantiated multiple times in a page.

As a bonus, this plugin also generates a unique id property (=uid= by
default) for each Vue.js component.

This plugin has no external dependencies.

** Installation
   :PROPERTIES:
   :CUSTOM_ID: installation
   :END:
via [[https://github.com/npm/npm][npm (node package manager)]]

#+begin_example
  $ npm install vue-unique-id
#+end_example

Then configure
[[https://vuejs.org/v2/guide/plugins.html#Using-a-Plugin][Vue to use the
plugin]]:

#+begin_example
  import UniqueId from 'vue-unique-id';
  // or
  const UniqueId = require('vue-unique-id');

  Vue.use(UniqueId);
#+end_example

** Examples
   :PROPERTIES:
   :CUSTOM_ID: examples
   :END:
*** Unique Component Identifier
    :PROPERTIES:
    :CUSTOM_ID: unique-component-identifier
    :END:
Each Vue component has a unique =uid= property.

#+begin_example
  const MyComponent = {
    created() {
      console.log("This component's unique id is: " + this.uid);
    },
  };
#+end_example

*** Form Inputs with Labels
    :PROPERTIES:
    :CUSTOM_ID: form-inputs-with-labels
    :END:
In order for an =<input>='s =<label>= to work correctly, a unique id
must be assigned to the =<input>= and referenced by the =<label>=. This
example shows how a reusable Vue component containing labelled
=<input>=s can generate a unique id for each of its =<input>= elements.

Vue template:

#+begin_example
  <label :for="$id('field1')">Field 1</label>
  <input :id="$id('field1')" type="text" />

  <label :for="$id('field2')">Field 2</label>
  <input :id="$id('field2')" type="text" />
#+end_example

Rendered output:

#+begin_example
  <label for="uid-42-field1">Field 1</label>
  <input id="uid-42-field1" type="text" />

  <label for="uid-42-field2">Field 2</label>
  <input id="uid-42-field2" type="text" />
#+end_example

*** Bootstrap Collapse Button
    :PROPERTIES:
    :CUSTOM_ID: bootstrap-collapse-button
    :END:
In this example, a unique id is assigned to the =div.collapse= element
and referenced by the toggle buttons.

Vue template:

#+begin_example
  <p>
    <a class="btn btn-primary" data-toggle="collapse" :href="$idRef('collapseExample')">
      Link with href
    </a>
    <button class="btn btn-primary" type="button" data-toggle="collapse" :data-target="$idRef('collapseExample')">
      Button with data-target
    </button>
  </p>
  <div class="collapse" :id="$id('collapseExample')">
    <div class="card card-body">
      Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident.
    </div>
  </div>
#+end_example

Rendered output:

#+begin_example
  <p>
    <a class="btn btn-primary" data-toggle="collapse" href="#uid-42-collapseExample">
      Link with href
    </a>
    <button class="btn btn-primary" type="button" data-toggle="collapse" data-target="#uid-42-collapseExample">
      Button with data-target
    </button>
  </p>
  <div class="collapse" id="uid-42-collapseExample">
    <div class="card card-body">
      Anim pariatur cliche reprehenderit, enim eiusmod high life accusamus terry richardson ad squid. Nihil anim keffiyeh helvetica, craft beer labore wes anderson cred nesciunt sapiente ea proident.
    </div>
  </div>
#+end_example

** API
   :PROPERTIES:
   :CUSTOM_ID: api
   :END:
*** =vm.uid=
    :PROPERTIES:
    :CUSTOM_ID: vm.uid
    :END:
Immutable string containing the component's unique identifier. The =uid=
property name can be changed with the [[#plugin-options][plugin
options]].

*** =vm.$id(id = '')=
    :PROPERTIES:
    :CUSTOM_ID: vm.idid
    :END:
Component-scoped HTML id generator. The optional id parameter specifies
the id to scope to the component.

*** =vm.$idRef(id = '')=
    :PROPERTIES:
    :CUSTOM_ID: vm.idrefid
    :END:
Component-scoped HTML id reference (href) generator. The optional id
parameter specifies the id to scope to the component. Prepends ='#'= to
the id generated by =vm.$id(id)=.

** Plugin Options
   :PROPERTIES:
   :CUSTOM_ID: plugin-options
   :END:
#+begin_example
  const DEFAULTS = {
    // {string} Property name of the component's unique identifier. Change this if 'vm.uid' conflicts
    // with another plugin or your own props.
    uidProperty: 'uid',

    // {string} Prefix to use when generating HTML ids. Change this to make your ids more unique on a
    // page that already uses or could use a similar naming scheme.
    uidPrefix: 'uid-',
  };
#+end_example

** Run Unit Tests
   :PROPERTIES:
   :CUSTOM_ID: run-unit-tests
   :END:
#+begin_example
  $ npm test
#+end_example

** Contributing
   :PROPERTIES:
   :CUSTOM_ID: contributing
   :END:
Contributors are welcome! See [[file:CONTRIBUTING.md][here]] for more
info.

** License
   :PROPERTIES:
   :CUSTOM_ID: license
   :END:
[[file:LICENSE][ISC]]
