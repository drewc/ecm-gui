#+TITLE: Contracts determine viability.

Contracts essentially determine what users can see and how claims are divided up.

#+begin_src vue :tangle "../src/components/Contract.vue"
  <template>
   <m-expansion-item 
     default-opened 
     >
     <template slot="header">
       <div class="row" style="width:100%;padding:0px;">
         <div class="col-shrink text-h6 "> Contract &nbsp; </div>
         <div class="col self-center text-center">
           <router-link class="" v-if="link" :to="{ path: '/contract/' + value.contract_id, query: { backToClaim: backToClaim } }">
             <big>{{ value.contract_number }}</big> 
           </router-link>
           <big v-else>{{ value.contract_number }}</big> 
           &nbsp;&nbsp;{{value.effective_date}}
           <small class="text-weight-thin"> to </small>
           {{ value.expiry_date }}
         </div>
       </div>
     </template>
     <q-separator/>
     <q-markup-table wrap-cells dense flat separator="vertical"> 
       <tbody>
         <tr v-if="value.syndicate"> 
           <th class="text-left">&nbsp;Syndicate&nbsp;</th>

           <td class="text-center"> 
             <router-link :to="{ path: '/person/' + value.syndicate.person_id, 
                               query: { backToClaim: backToClaim } }"> 
               {{ value.syndicate.full_name }}
             </router-link>

           </td>
         </tr> 
         <tr v-if="value.london_broker"> 
           <th class="text-left">&nbsp;Broker&nbsp;</th>

           <td class="text-center"> 
             <router-link :to="{ path: '/person/' + value.london_broker.person_id, 
                               query: { backToClaim: backToClaim } }"> 
               {{ value.london_broker.full_name }}
             </router-link>

           </td>
         </tr> 
         <tr v-if="value.agency"> 
           <th class="text-left">&nbsp;Agency&nbsp;</th>

           <td class="text-center"> 
             <router-link :to="{ path: '/person/' + value.agency.person_id, 
                               query: { backToClaim: backToClaim } }"> 
               {{ value.agency.full_name }}
             </router-link>

           </td>
         </tr> 

       </tbody>
     </q-markup-table>
   </m-expansion-item>
  </template>
  <script>
  // import Risk from 'components/Risk'
  export default {
    name: 'Contract',
    // components: { Risk },
    props: { value: Object, link: Boolean, backToClaim: Number, masonry: Boolean },
    methods: {
      reveal () { this.$ecm.revealComp(this) },
      raise () { this.$ecm.raiseComp(this) }
    }
  }
  </script>
#+end_src

* ~ContractPage~ 


** Router
 First things first, a route to it. 

 #+begin_src javascript :tangle "../src/router/contract.js"
   const contractRoute = {
     path: '/contract/:id', props: true, component: () => import('pages/ContractPage') 
   }

   export default contractRoute
 #+end_src


** Template
#+begin_src vue :tangle "../src/pages/ContractPage.vue" :noweb yes 
  <template>
   <q-card> 
   <router-link v-if="backToClaim" :to="{ path: '/claim/' + backToClaim }"
                style="font-size: 150%">
     <q-icon name="arrow_back"/> Back to Claim #{{ backToClaim }}
   </router-link>
    <contract v-if="contract" v-model="contract" :back-to-claim="backToClaim" />
    </q-card>
  </template>
  <script>
  code:<<contract-page-script>>
  </script>

#+end_src

** Script

 #+begin_src javascript :noweb-ref contract-page-script
        import Contract from 'components/Contract'

        export default {
          name: 'ContractPage',
          props: { id: String },
          components: {
            Contract
          },
          data () {
            return {
              contract: undefined,
              error: false,
              backToClaim: false
            }
          },
          methods: {
            findContract (id) {
              this.$axios.get('/json/contract', { params: { 'id': id } })
                .then((response) => {
                  this.contract = response.data
                  console.log(this.claim)
                  document.title = 'Contract #' + this.contract.contract_number + ' - ECM'
                })
                .catch((e) => {
                  this.error = e.message
                  this.$q.notify({
                    color: 'negative',
                    position: 'top',
                    message: 'Loading Contract failed',
                    icon: 'report_problem'
                  })
                })
            },
            foo () {
              return 'asd'
            }
          },
          created () {
            this.findContract(this.id)
          },
          mounted () {
            this.backToClaim = this.$route.query.backToClaim
            console.log(this.backToClaim)
          },
          watch: {
            $route (to, from) {
              this.findContract(this.id)
            }
          }
        }
 #+end_src

* Literate Tangling 

Because our linting needs certain things to be indented, we fsck with noweb a wee bit.

#+begin_src emacs-lisp
  (setq-local org-babel-noweb-wrap-start "code:<<")
  (add-hook 'org-babel-post-tangle-hook #'delete-trailing-whitespace)

  (add-hook 'org-babel-post-tangle-hook #'save-buffer :append)
  ;; # Local Variables:
  ;; # org-babel-noweb-wrap-start: "code:<<"
  ;; # End:
#+end_src

#+RESULTS:
| delete-trailing-whitespace | save-buffer |


#+begin_src emacs-lisp
  org-babel-noweb-wrap-start
#+end_src

#+RESULTS:
: code:<<
