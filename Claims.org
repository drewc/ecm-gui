#+TITLE: Claims

Claims are a big deal.

* /Widget/ InlineClaim

For searching, and selecting, and listing etc etc a claim needs to be displayed as an inlineblock.

#+begin_src vue :tangle src/components/widgets/InlineClaim.vue
<script setup>
import InlineContract from './InlineContract.vue'
const props = defineProps({
    claim: Object
})
</script>
<template>
  <div>
    <span class="uk-text-lead">#{{ claim.claim_id }}&nbsp;</span>
    <span><span class="uk-text-meta">Insured </span>
    <span v-html="claim.risk.policy.insured.full_name"></span></span>
    <span><span class="uk-text-meta">DOL </span>
    <span v-html="claim.timeline.date_of_loss"></span></span>
    <span><span class="uk-text-meta">Contract </span> {{ claim.risk.contract }}
      <InlineContract :contract="claim.risk.contract" /></span>
  </div>
</template>
#+end_src

* /Widget/ SelectClaim

#+begin_src vue :tangle src/components/widgets/SelectClaim.vue
<script setup>
import { ref, computed, onMounted } from 'vue'
import { useStore } from 'vuex'
import { post } from 'axios'

import SimpleTypeAhead from '../SimpleTypeAhead.vue';
import { cache } from '../../assets/storage.js'
import InlineClaim from './InlineClaim.vue'
const claim = ref()

window.localforage = cache

const store = useStore();
const user = computed(() => store && store.state && store.state.user)

if (claims.value.length == 0) updateClaims();

const props = defineProps({
    modelValue: Object
})
const emits = defineEmits(['update:modelValue']);



const error = ref(err)
const inp = (ta) => ta.$el.getElementsByTagName("input")[0].setAttribute("class", "uk-input")

const typeahead = ref()

onMounted(() => {
 const ta = typeahead.value
 ta && inp(ta)
 // if (contracts.value.length == 0) updateClaims();
})

const taInput = ({ input, items }) => {
 console.log('Test Input', input, items, typeahead)
}

const aroundItems = (items) => {
 console.log("aroundItems?", items)
  return [
    {
      claim_id: "Search for " + typeahead.value.input,
      search_for_claim: typeahead.value.input
    },
    ...items
  ]

};

const findClaim = (thing) => {
  console.log('findClaim', thing, !isNaN(thing))
  if (!isNaN(thing)) {
    console.log('posting!')
    return post('/rpc/db/claim', { claim_id: parseInt(thing) })
}
}
const selectItem = (i) => {
  if (!!i.search_for_claim) {
   console.log("Searching ", i.search_for_claim)
   typeahead.value.input = i.search_for_claim
    findClaim(i.search_for_claim).then(c => {
      typeahead.value.selectItem(c.data);
      console.log('Found one', c)
    })
         .catch(e => console.error(e))
  } else {
  claim.value = i;
  emits('update:modelValue', i)
  }
}

</script>

<script>
import { ref } from 'vue'

const claims = ref([])
const err = ref()

const updateClaims = () => { false }

</script>
<template>
  <InlineClaim v-if="claim" :claim="claim" />
<SimpleTypeAhead
  ref="typeahead"
  placeholder="Claim # or search" :items="claims"
    :min-input-length="2" :item-projection="(i) => i.claim_id"
  :around-items="aroundItems"
    @onInput="taInput"
    @select-item="selectItem">
 <template #list-item-text="{ boldMatchText, itemProjection, item }">
 <h4 style="display: inline-block" v-html="boldMatchText(itemProjection(item))"></h4>
  </template>
</SimpleTypeAhead>

<!-- <div v-if="claims.length === 0" uk-spinner></div> -->
</template>

#+end_src

* ~://rpc/db/claim/${number}~ endpoint


#+begin_src scheme :tangle ./endpoints/db/claim.ss :noweb yes
(export #t)
(import :drewc/ftw
        :std/sugar
        :drewc/db/dbi :std/srfi/13
        :ecm/gui/auth :ecm/gui/database)
(declare (not optimize-dead-definitions))

(define-json-endpoint claim "/rpc/db/claim")

(def (find-claim id)
  (def c (ecm-sql-e* sql-eval-query "SELECT jso.claim($1::int)" id))
  ;;(error "c;lam" c id)
  (car c))

(def-auth (claim/POST)
  (def jso (http-request-body-json*))
  (def claim (let-hash jso (find-claim .claim_id)))
  (respond/JSON claim))
#+end_src
* ~://rpc/db/claims/search~ endpoint


#+begin_src scheme :untangle ./endpoints/db/contracts.ss :noweb yes
(export #t)
(import :drewc/ftw
        :std/sugar
        :drewc/db/dbi :std/srfi/13
        :ecm/gui/auth :ecm/gui/database
        )
(declare (not optimize-dead-definitions))


(define-json-endpoint contracts "/rpc/db/contracts")

(def contracts-text "
SELECT json_build_object('contracts', contracts)
 FROM (SELECT json_agg(row_to_json(cs)) AS contracts
       FROM
      (SELECT contract_id, contract_number, effective_date, expiry_date,
           agency_id, person_name(agency_id) AS agency,
           syndicate_id, person_name(syndicate_id) AS syndicate,
           london_broker_id, person_name(london_broker_id) AS london_broker,
           insurance_company_id, person_name(insurance_company_id) AS insurance_company

           FROM contract WHERE contract_number IS NOT NULL
             ORDER BY effective_date IS NOT NULL DESC,
               effective_date DESC) cs
      ) c
    ")

(def-auth (contracts/GET)
  (def contracts (ecm-sql-e*
                  sql-eval-query contracts-text))
  (respond/JSON (car contracts)))
#+end_src
