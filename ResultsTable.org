#+TITLE: Results Table

Almost everything returned from the PostgreSQL server is a table of rows.

We clusterize. We XLSX'ise. We store history. This is where it all comes together.

* Menu Dropdown

#+begin_src html :noweb-ref menudrop
<button class="uk-button uk-button-default sql-menu-button" type="button">
  <span uk-icon="table"></span>
</button>
<div uk-dropdown>
  <ul class="uk-nav uk-dropdown-nav">
    <li class="uk-nav-header">Spreadsheet</li>
    <li>Name: <input v-model="sheetname" /> </li>
    <li>
      <button type="button"
        @click="makeAndDownloadSheetBook(result, sheetname)">
        Download
      </button>
    </li>

    <!-- <li class="uk-nav-header">Report</li> -->
    <!-- <li> -->
    <!--   <router-link -->
    <!--     :to="{ name: 'save-new-report', params: { query: result.text }}" -->
    <!--     >Save as Report</router-link> -->
    <!-- </li> -->
    <li><a href="#" @click="showModal()">fullscreen</a></li>
    <!-- <li class="uk-nav-divider"></li> -->
    <!-- <li><a href="#">Item</a></li> -->
  </ul>
</div>

#+end_src
* /File/ ~pgui/src/components/ResultsTable.vue~

#+begin_src vue :tangle src/components/ResultsTable.vue :noweb yes
<script setup>
import XLSX from 'xlsx-js-style'
import ExcelJS from 'exceljs'
import Clusterize from './Clusterize.vue'
import { ref, getCurrentInstance } from 'vue'
import UIkit from 'uikit'
import { saveAs } from 'file-saver'

window.ExcelJS = ExcelJS

const props = defineProps({
    headers: Array,
    rows: Array,
    name: String
})

const sheetname = ref(props.name || 'Database-Report')

function makeSheetBook(name = sheetname.value) {
 const wb = XLSX.utils.book_new();

 const sheet = [ ...(props.headers ? [props.headers] : []), ...props.rows ]
 const ws = XLSX.utils.aoa_to_sheet(sheet);
  ws["A1"].s = {
 	font: {
 		name: "Calibri",
 		sz: 24,
 		bold: true,
 		color: { rgb: "FFAA00" },
	},
};

 console.log('ws', ws)
    XLSX.utils.book_append_sheet(wb, ws, name);


    window.foo = wb;

    return wb;

}

async function saveFile (fileName, workbook) {
  const xls64 = await workbook.xlsx.writeBuffer({ base64: true })
  saveAs(
    new Blob([xls64], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' }),
    fileName
  )
}

const workbook = new ExcelJS.Workbook()

const worksheet = workbook.addWorksheet('People')
worksheet.columns = [
  { header: 'Id', key: 'id', width: 10 },
  { header: 'Name', key: 'name', width: 10 },
  { header: 'D.O.B.', key: 'DOB', width: 30 }
]
worksheet.addRow([10086, 'Ken1', 'YYYY-MM-DD'])
worksheet.addRow([10087, 'Ken2', 'YYYY-MM-DD'])
worksheet.addRow([10088, 'Ken3', 'YYYY-MM-DD'])
worksheet.getCell('A1').font = {
    name: 'Comic Sans MS',
    family: 4,
    size: 24,
    underline: true,
    bold: true
  };

saveFile('fileNameyXXX', workbook)





function makeAndDownloadSheetBook(name = sheetname.value) {

     const book = makeSheetBook(name)

     XLSX.writeFile(book, name + ".xlsb", {compression:true});

}


const self =  getCurrentInstance();


console.warn('Res!', self, self.refs.cluster)

function showModal() {
  const modal = self.refs.modal;
  const dialog = self.refs.md;
  const cluster = self.refs.cluster;

  console.log("show modal", modal, cluster);
  dialog.appendChild(cluster);
  UIkit.modal(modal).show();

  UIkit.util.on(modal, 'hide', () => { hideModal() })
}

function hideModal() {
  const cluster = self.refs.cluster;
  const result = self.refs.result;
   result.appendChild(cluster);
}

</script>

<template>
<div>
  <<menudrop>>
 <div ref="result" class="sql-result">
    <div ref="cluster">
      <Clusterize
        :headers="headers"
        :cluster="rows"
        />
    </div>
  </div>
  <div
    ref="modal" class="uk-modal-full sql-result-modal"
    uk-modal>
    <div class="uk-modal-dialog" ref="md" uk-height-viewport>
      <button
        class="uk-modal-close-full uk-close-large"
        type="button" uk-close></button>
      Here!!

    </div>
  </div>
</div>
</template>

<style>
  .sql-menu-button {
    float: right;
     opacity:50%;
     line-height: 0;
     padding:0;
     position: relative;
     top: 0.9em;
     right: 2.5em;
     border: 1px solid white;
     z-index: 42;
  }
  .sql-menu-button:hover {
    opacity: 100
  }

.sql-result-modal .clusterize-scroll{
  max-height: 90vh;
  overflow: auto;
}
 </style>
#+end_src
