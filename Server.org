#+TITLE: Server

The GUI requires a Web Server for certain actions.


* Static Exec

#+begin_src scheme :tangle ecm-gui.ss
(import :drewc/ftw
        :ecm/gui/endpoints/login
        :ecm/gui/endpoints/report/pmi
        :ecm/gui/server/httpd
        :gerbil/gambit/threads
        :std/sugar
        ./conf
        :std/getopt
        )
(export main)

(extern namespace: #f replx macro-thread-tgroup)
(extern (display-exception display-exception))

(##current-input-port (##repl-input-port))
(##current-output-port (##repl-output-port))

(define (##repl-no-banner)
  (##repl-debug
   (lambda (first port) #f)
   #t))

(def main-opts
  (getopt
   (option '--wwwroot "--wwwroot"
           help: "The root for the http file server")))

#;(define (##new-repl)
  (declare (not interrupts-enabled))
  (##thread-start!
   (let* ((primordial-tgroup
           (macro-thread-tgroup ##primordial-thread))
          (input-port ##stdin-port)
          (output-port ##stdout-port)
          (thread
           (##make-root-thread
            (lambda ()
                (let ((input-port (##repl-input-port))
                      (output-port (##repl-output-port)))
                  (##parameterize ((##current-input-port input-port)
                                   (##current-output-port output-port))
                    ;; start REPL
                    (##repl-no-banner))))
            (##void) ;; no name
            primordial-tgroup
            input-port
            output-port)))
     thread)))

(def (main . args)
  (def httpd (ensure-ecm-httpd!))
  (set! args (getopt-parse main-opts args))
  (def wwwroot (or (hash-get args '--wwwroot) (find-wwwroot)))
  (set! (conf-ref 'wwwroot) wwwroot)

  (displayln wwwroot)
  (display "ECM Gui v2.a4a.42\n")

  (##repl-no-banner)
  (display "\nJoining httpd thread")
   (thread-join! httpd))
#+end_src

#+begin_src shell :tangle bin/ecm-gui.sh :shebang #!/usr/bin/env bash

function realpath()
{
    f=$@
    if [ -d "$f" ]; then
        base=""
        dir="$f"
    else
        base="/$(basename "$f")"
        dir=$(dirname "$f")
    fi
    dir=$(cd "$dir" && pwd)
    echo "$dir$base"
}

_bindir=$(dirname $(realpath $0))

gxi -e '(import
        :ecm/gui/endpoints/login
        :ecm/gui/endpoints/report/pmi
        :ecm/gui/server/httpd
        )'\
            -e '(begin (ensure-ecm-httpd!) (display "ECM Gui v0.42"))'\
            -
#+end_src



* /File/ ~server/httpd.ss~

By default it runs on port ~8988~.

The "client" is served from the ~(conf-ref 'wwwroot)~.


#+begin_src scheme :tangle server/httpd.ss
(export #t)

(import :drewc/ftw :std/format ../conf :std/srfi/13)

(def ecm-http-server #f)

(def (ensure-ecm-httpd! address: (address "0.0.0.0") port: (port 8988))
  (def saddress (format "~a:~a" address port))
  (or ecm-http-server
      (let ((s (start-ftw-http-server! saddress)))
        (set! ecm-http-server s)
        s)))

(def (match-file req)
  (def fn (string-trim (http-request-path req) #\/))
  (when (string= fn "") (set! fn "index.html"))
  (def wwwroot (conf-ref 'wwwroot))
  (def filename (path-expand fn wwwroot))
  (displayln "Searchgn for " filename)
  (and (file-exists? filename)
       [filename]))

(define-endpoint client-files match-file priority: 50)
(def client-files/GET (cut http-response-static-file* <>))


;; (def static-root-dir (current-directory))

;; (define-endpoint js-files "^/js/(.*)$" priority: 1024)
;; (define-endpoint css-files "^/css/(.*)$" priority: 1024)
;; (define-endpoint html-files "^/html/(.*)$" priority: 1024)

;; (def (make-getter where)
;;   (lambda (filename)
;;     (http-response-static-file*
;;      (path-expand (string-append where filename)
;;                   static-root-dir))))

;; (def js-files/GET (make-getter "js/"))
;; (def css-files/GET (make-getter "css/"))
;; (def html-files/GET (make-getter "html/"))


#+end_src
